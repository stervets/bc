// Generated by CoffeeScript 1.7.1
(function() {
  this.Application.Controller.User = (function() {
    User.prototype.tank = null;

    User.prototype.keys = {};

    User.prototype.moving = false;

    User.prototype.onMoveKeyDown = function(e) {
      _dump(this._keySign[e.keyCode] & 1);
      if (this._keySign[e.keyCode] & 1 && !(this.pressedKeys & 1)) {
        this.tank.move(DIRECTION.UP);
      } else if (this._keySign[e.keyCode] & 2 && !(this.pressedKeys & 2)) {
        this.tank.move(DIRECTION.DOWN);
      } else if (this._keySign[e.keyCode] & 4 && !this.pressedKeys & 4) {
        this.tank.move(DIRECTION.LEFT);
      } else if (this._keySign[e.keyCode] & 8 && !this.pressedKeys & 8) {
        this.tank.move(DIRECTION.RIGHT);
      }
      return this.pressedKeys |= this._keySign[e.keyCode];
    };

    User.prototype.onMoveKeyUp = function(e) {
      this.pressedKeys ^= this._keySign[e.keyCode];
      if (!this.pressedKeys) {
        return this.tank.stop();
      }
    };

    User.prototype.onShoot = function() {
      return this.tank.shoot();
    };

    User.prototype._pressedKeys = 0;

    User.prototype._oldPressedKeys = 0;

    User.prototype._keySign = {};

    User.prototype._moveKeyObjects = {};

    User.prototype._moveKeys = [];

    User.prototype._shootKey = null;

    User.prototype.update = function() {
      var action, index, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this._moveKeys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        if (this._moveKeyObjects[action].isDown) {
          this._pressedKeys |= this._keySign[action];
        } else {
          if (this._pressedKeys & this._keySign[action]) {
            this._pressedKeys ^= this._keySign[action];
          }
        }
      }
      if (this._pressedKeys !== this._oldPressedKeys) {
        _ref1 = this._moveKeys;
        for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
          action = _ref1[index];
          if (this._moveKeyObjects[action].isDown && (this._oldPressedKeys > this._pressedKeys || !(this._oldPressedKeys & this._keySign[action]))) {
            break;
          }
        }
        if (index < this._moveKeys.length) {
          this.tank.move(action);
          this.moving = true;
        } else {
          this.moving = false;
          this.tank.stop();
        }
        this._oldPressedKeys = this._pressedKeys;
      }
      if (this._shootKey.isDown) {
        return this.tank.shoot();
      }
    };

    function User(game, tank, keys) {
      var action, name, pow;
      this.game = game;
      this.tank = tank;
      if (keys == null) {
        keys = {};
      }
      pow = 0;
      for (name in ACTION) {
        action = ACTION[name];
        if (!(action !== ACTION.SHOOT)) {
          continue;
        }
        this._keySign[action] = Math.pow(2, pow++);
        this._moveKeys.push(action);
        this._moveKeyObjects[action] = this.game.input.keyboard.addKey(keys[action] != null ? keys[action] : DEFAULT_KEYS[action]);
      }
      this._shootKey = this.game.input.keyboard.addKey(keys[ACTION.SHOOT] != null ? keys[ACTION.SHOOT] : DEFAULT_KEYS[ACTION.SHOOT]);
    }

    return User;

  })();

}).call(this);

//# sourceMappingURL=user.map
