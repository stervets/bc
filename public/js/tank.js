// Generated by CoffeeScript 1.7.1
(function() {
  var BULLET, DAMAGE, LIGHT, SPEED, SPRITE, VELOCITY,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SPRITE = 'tank';

  BULLET = 'bullet';

  LIGHT = 'light';

  DAMAGE = 'damage';

  SPEED = 100;

  VELOCITY = {};

  VELOCITY[ACTION.MOVE_UP] = {
    x: 0,
    y: -SPEED,
    angle: 0
  };

  VELOCITY[ACTION.MOVE_RIGHT] = {
    x: SPEED,
    y: 0,
    angle: 90
  };

  VELOCITY[ACTION.MOVE_DOWN] = {
    x: 0,
    y: SPEED,
    angle: 180
  };

  VELOCITY[ACTION.MOVE_LEFT] = {
    x: -SPEED,
    y: 0,
    angle: -90
  };

  this.Tank = (function() {
    Tank.prototype.bulletGroup = GROUP.ENEMY_BULLET;

    Tank.prototype.canShoot = true;

    Tank.prototype.bullets = null;

    Tank.prototype.moving = false;

    Tank.prototype.shoot = function() {
      var bullet;
      if (this.canShoot && (bullet = this.bullets.getFirstDead())) {
        this.canShoot = false;
        bullet.reset(this.body.position.x, this.body.position.y);
        bullet.angle = this.body.angle;
        this.game.physics.arcade.velocityFromAngle(this.body.angle - 90, 500, bullet.body.velocity);
        this.lightTween.start();
        this.turretRecoilTween.start();
        return _.delay(function(tank) {
          return tank.canShoot = true;
        }, 500, this);
      }
    };

    Tank.prototype.move = function(direction) {
      var angleFrom, angleTo;
      this.moving = direction;
      this.body.body.position.x = VELOCITY[direction].x ? this.body.body.position.x : Math.round(this.body.body.position.x / 16) * 16;
      this.body.body.position.y = VELOCITY[direction].y ? this.body.body.position.y : Math.round(this.body.body.position.y / 16) * 16;
      this.body.body.velocity.setTo(VELOCITY[direction].x, VELOCITY[direction].y);
      angleFrom = this.body.angle;
      angleTo = VELOCITY[direction].angle;
      if (Math.abs(angleFrom) !== angleTo || Math.abs(angleFrom) === 90) {
        this.angleTween._valuesStart.angle = (function() {
          switch (false) {
            case !(angleFrom === 180 && angleTo === -90):
              this.body.angle = -179;
              return -180;
            case !(angleFrom === -90 && angleTo === 180):
              this.body.angle = 269;
              return 270;
            case !(angleFrom === -180 && angleTo === 90):
              this.body.angle = 179;
              return 180;
            default:
              return angleFrom;
          }
        }).call(this);
        this.angleTween._valuesEnd.angle = angleFrom === -90 && angleTo === 180 ? -180 : angleTo;
        return this.angleTween.start();
      }
    };

    Tank.prototype.stop = function() {
      this.moving = false;
      return this.body.body.velocity.setTo(0, 0);
    };

    Tank.prototype.onBulletWallCollide = function(bullet, wall) {
      this.damageAnimation.position.set(bullet.position.x, bullet.position.y);
      this.damageAnimation.rotation = bullet.rotation;
      bullet.kill();
      this.damageAnimation.animations.play(DAMAGE);
      this.game.$.destroyWall(wall, bullet.angle);
      if (this.moving) {
        return this.move(this.moving);
      }
    };

    function Tank(game, x, y, bulletGroup) {
      var bullet;
      this.game = game;
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.bulletGroup = bulletGroup != null ? bulletGroup : GROUP.ENEMY_BULLET;
      this.onBulletWallCollide = __bind(this.onBulletWallCollide, this);
      this.bullets = this.game.add.group();
      this.bullets.enableBody = true;
      this.bullets.enableBodyDebug = true;
      bullet = this.game.add.sprite(this.game.world.bounds.x - 100, this.game.world.bounds.y - 100, BULLET);
      bullet.anchor.set(0.5, 0.5);
      bullet.checkWorldBounds = true;
      bullet.outOfBoundsKill = true;
      this.bullets.add(bullet);
      this.damageAnimation = this.game.add.sprite(0, 0, DAMAGE);
      this.damageAnimation.anchor.setTo(0.5, 0.7);
      this.damageAnimation.scale.setTo(0.4, 0.4);
      this.damageAnimation.animations.add(DAMAGE, [0, 1, 2, 3, 4, 5], 32);
      this.body = this.game.add.sprite(this.x, this.y, SPRITE);
      this.body.anchor.set(0.5, 0.5);
      this.turret = this.game.add.sprite(0, 0, SPRITE);
      this.turret.anchor.set(0.5, 0.5);
      this.turret.frame = 1;
      this.body.addChild(this.turret);
      this.turretRecoilTween = this.game.add.tween(this.turret).to({
        y: 10
      }, 50).to({
        y: 0
      }, 100);
      this.game.physics.arcade.enable(this.body);
      this.light = this.game.add.sprite(0, -this.body.height / 2, LIGHT);
      this.light.anchor.set(0.5, 0.5);
      this.light.alpha = 0.9;
      this.light.blendMode = PIXI.blendModes.ADD;
      this.light.scale.setTo(0);
      this.lightTween = this.game.add.tween(this.light.scale).to({
        x: 1,
        y: 3
      }, 50).to({
        x: 0,
        y: 0
      }, 100);
      this.body.addChild(this.light);
      this.body.scale.set(0.5);
      this.angleTween = this.game.add.tween(this.body);
      this.angleTween.to({
        angle: 90
      }, 100);
    }

    return Tank;

  })();

}).call(this);

//# sourceMappingURL=tank.map
